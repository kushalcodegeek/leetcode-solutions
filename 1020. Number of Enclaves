class Solution {
    public int numEnclaves(int[][] board) {
        int n=board.length;
        int m=board[0].length;
        int c=0;
        boolean[][] vis=new boolean[n][m];
        int[] dr={-1,0,1,0};
        int[] dc={0,1,0,-1};
        
        for(int j=0;j<m;j++){
            if(!vis[0][j] && board[0][j]==1){
                dfs(board,vis,0,j,dr,dc);
            }
            if(!vis[n-1][j] && board[n-1][j]==1){
                dfs(board,vis,n-1,j,dr,dc);
            }
        }
        for(int i=0;i<n;i++){
            if(!vis[i][0] && board[i][0]==1){
                dfs(board,vis,i,0,dr,dc);
            }
            if(!vis[i][m-1] && board[i][m-1]==1){
                dfs(board,vis,i,m-1,dr,dc);
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==1 && vis[i][j]==false ){
                    c++;
                }
            }
        }
        return c;
    }
    
    public void dfs(int[][] board,boolean[][] vis,int r,int c,int[] dr,int[] dc){
        board[r][c]=0;
        vis[r][c]=true;
        int n=board.length;
        int m=board[0].length;

        
        for(int k=0;k<4;k++){
            int nr=r+dr[k];
            int nc=c+dc[k];
            if(nr>=0 && nr<n && nc>=0  && nc<m && vis[nr][nc]==false && board[nr][nc]==1){
                
                dfs(board,vis,nr,nc,dr,dc);
            }
        }
    }
}
